<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue-Router 实现原理及基础功能实现</title>
    <url>/2021/10/07/Vue-Router%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="VueRouter实现原理"><a href="#VueRouter实现原理" class="headerlink" title="VueRouter实现原理"></a>VueRouter实现原理</h1><h2 id="VueRouter基本使用"><a href="#VueRouter基本使用" class="headerlink" title="VueRouter基本使用"></a>VueRouter基本使用</h2><ol>
<li>[/src/router/index.js]Vue.use(VueRouter)：Vue.use是用来注册路由插件的，如果参数是函数的话那么直接通过函数注册组件，如果参数是对象的话，那么会调用该对象的install方法注册组件。</li>
<li>[/src/router/index.js]routes：设置路由规则。</li>
<li>[/src/router/index.js]new VueRouter({ routes })：创建router对象，并且传入路由规则。</li>
<li>[/src/main.js]new Vue({ router })：注册router对象。</li>
<li>[/src/App.vue]&lt;router-viwe&gt;：创建路由组件的占位。</li>
<li>[/src/App.vue]&lt;router-link&gt;：创建链接。</li>
</ol>
<h3 id="5-中的router的作用"><a href="#5-中的router的作用" class="headerlink" title="[5]中的router的作用"></a>[5]中的router的作用</h3><ul>
<li>为Vue对象注入$route和$router两个属性。</li>
<li>$route：路由规则对象，包含当前路由在设定时的路由规则。</li>
<li>$router：路由对象，包含一些路由使用时的一些方法，同时也有currentRoute，也就是当前的路由规则。（是VueRouter的一个实例）</li>
</ul>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/detail/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Detail&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;photo&quot; */</span> <span class="string">&#x27;../views/Detail.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其中的`:id`就是路由的参数，传递对应的参数可以跳转到对应的路由中。</span></span><br><span class="line"><span class="comment">// 组件中获取参数的方式有两种；</span></span><br><span class="line"><span class="comment">// 方式一：在对应路由的页面内使用`this.$router.params.id`就可以获取。</span></span><br><span class="line"><span class="comment">// 方式二：在对应的路由规则中配置props属性，之后再组件内定义props和对应的参数名，就可以获取到对应的值。</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><blockquote>
<p>嵌套路由主要是通过children的方式定义的。并且可以定义子的默认显示的页面。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>: Layout,</span><br><span class="line">	<span class="attr">children</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">			<span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>: Index,</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">			<span class="attr">path</span>: <span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">			<span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Detail.vue&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><blockquote>
<p>就是使用路由对象的replace方法。<br><code>this.$router.push(&#123; name: XX, params: XX &#125;)</code>：<br><code>this.$router.replace([url])</code>：不会记录历史。前进和后退按钮是不可点击的，是不记入历史的。<br><code>this.$router.go([Number])</code>：<code>Number === -1</code>等效于<code>$router.back()</code></p>
</blockquote>
<h3 id="hash模式和history模式的区别"><a href="#hash模式和history模式的区别" class="headerlink" title="hash模式和history模式的区别"></a>hash模式和history模式的区别</h3><blockquote>
<p>hash模式：URL表现形式为<code>#/detail?...</code>；基于锚点，和onhashchange事件。<br>history模式：URL表现形式就是一个正常的URL不会出现#号之类的符号；基于H5中的history API，但是不支持IE10以前的版本，主要是通过调用history.pushState()/replaceState()方法实现的。history.pushState()和history.push()的区别，push会向后台发送请求，而pushState只会改变地址栏中的URL，并且记录在浏览器历史中。</p>
</blockquote>
<h4 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h4><ol>
<li>需要服务器的支持。</li>
<li>在单页面应用中，如果服务器不存在对应URL地址的页面，那么在页面刷新的时候，就会去请求对应地址的资源，那么就会返回404。<ul>
<li>解决方式：在服务器端应该除了静态资源以外都返回单页面应用的index.html<blockquote>
<p>NodeJS中的配置方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(history());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置完成history模式之后，浏览器在取得页面请求地址的时候，由于支持history，所以服务器会将对应的index.html的内容发送过去，浏览器根据地址，再将对应的页面渲染出来。</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<blockquote>
<p>nginx中的配置方式<br>打包的前端项目要放在<code>nginx/html</code>下边<br>修改nginx.conf文件中的</p>
</blockquote>
<h3 id="VueRouter的实现原理"><a href="#VueRouter的实现原理" class="headerlink" title="VueRouter的实现原理"></a>VueRouter的实现原理</h3><h4 id="hash模式的基本原理"><a href="#hash模式的基本原理" class="headerlink" title="hash模式的基本原理"></a>hash模式的基本原理</h4><ol>
<li>URL中#后面的内容作为路径地址。</li>
<li>监听hashchange事件</li>
<li>根据当前路由地址找到对应组件重新渲染<h4 id="history模式的基本原理"><a href="#history模式的基本原理" class="headerlink" title="history模式的基本原理"></a>history模式的基本原理</h4></li>
<li>通过history.pushState()方法改变地址栏</li>
<li>监听popstate事件（历史状态被激活的时候才会触发 popstate 事件）</li>
<li>根据当前路由地址找到对应组件重新渲染<h4 id="VueRouter的类图"><a href="#VueRouter的类图" class="headerlink" title="VueRouter的类图"></a>VueRouter的类图</h4></li>
</ol>
<ul>
<li>options                             (属性)</li>
<li>data                    (属性)</li>
<li>routeMap             (属性)</li>
</ul>
<hr>
<ul>
<li>contrustor(Options): VueRouter</li>
<li>_install(Vue): void</li>
<li>init(): void</li>
<li>initEvent(): void</li>
<li>createRouteMap(): void</li>
<li>initComponents(Vue): void<h4 id="Vue的构建版本"><a href="#Vue的构建版本" class="headerlink" title="Vue的构建版本"></a>Vue的构建版本</h4><blockquote>
<p>运行时版：不支持template模板，需要打包的时候提前编译。<br>直接编写render函数就可以了。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>完整版本：包含运行时和编译器，体积比运行时版大10k左右，程序运行的时候把模板转换成render函数。<br>可以通过Vue-cli的vue.config.js的runtimeCompiler，开启完整版本。</p>
</blockquote>
<h4 id="完整my-router"><a href="#完整my-router" class="headerlink" title="完整my-router"></a>完整my-router</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> install (Vue) &#123;</span><br><span class="line">    <span class="comment">// 判断插件是否被安装</span></span><br><span class="line">    <span class="keyword">if</span> (VueRouter.install.installed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VueRouter.install.installed = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 将Vue构造函数记录到全局变量</span></span><br><span class="line">    _Vue = Vue</span><br><span class="line">    <span class="comment">// 把创建Vue实例时候传入的router对象注入到Vue实例上。</span></span><br><span class="line">    <span class="comment">// 混入</span></span><br><span class="line">    _Vue.mixin(&#123;</span><br><span class="line">      beforeCreate () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$options.router) &#123;</span><br><span class="line">          _Vue.prototype.$router = <span class="built_in">this</span>.$options.router</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.options = options</span><br><span class="line">    <span class="built_in">this</span>.routeMap = &#123;&#125;</span><br><span class="line">    <span class="comment">// 响应式对象和创建响应式对象</span></span><br><span class="line">    <span class="comment">// 响应式对象的原因：data中存储当前地址，路由变化时需要自动加载组件。</span></span><br><span class="line">    <span class="built_in">this</span>.data = _Vue.observable(&#123;</span><br><span class="line">      <span class="attr">current</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  creatRouteMap () &#123;</span><br><span class="line">    <span class="comment">// 遍历所有的路由规则，之后将对应的路由规则存储到routeMap的键值对中</span></span><br><span class="line">    <span class="built_in">this</span>.options.routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.routeMap[route.path] = route.component</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init () &#123;</span><br><span class="line">    <span class="built_in">this</span>.creatRouteMap()</span><br><span class="line">    <span class="built_in">this</span>.initComponents(_Vue)</span><br><span class="line">    <span class="built_in">this</span>.initEvent()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initComponents (Vue) &#123;</span><br><span class="line">    Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">to</span>: <span class="built_in">String</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line">        <span class="keyword">return</span> h(<span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">href</span>: <span class="built_in">this</span>.to</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">on</span>: &#123;</span><br><span class="line">            <span class="attr">click</span>: <span class="built_in">this</span>.clickhandler</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [<span class="built_in">this</span>.$slots.default])</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line">        clickhandler (e) &#123;</span><br><span class="line">          history.pushState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="built_in">this</span>.to)</span><br><span class="line">          <span class="built_in">this</span>.$router.data.current = <span class="built_in">this</span>.to</span><br><span class="line">          e.preventDefault()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">      render (h) &#123;</span><br><span class="line">        <span class="keyword">const</span> cm = self.routeMap[self.data.current]</span><br><span class="line">        <span class="keyword">return</span> h(cm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initEvent () &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data.current = <span class="built_in">window</span>.location.pathname</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue原理篇</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue原理</tag>
      </tags>
  </entry>
</search>
